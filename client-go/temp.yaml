package main

import (
	"context"
	"flag"
	"fmt"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/rest"
	"k8s.io/client-go/tools/clientcmd"
)

func main-1() {
	kubeconfig := flag.String("kubeconfig", "/home/ashishjain/Downloads/config", "location of kubeconfig file")
	config, err := clientcmd.BuildConfigFromFlags("", *kubeconfig)
	if err != nil {
		// handle error
		fmt.Printf("this is error ashish jain %s \n", err.Error())
		_, err := rest.InClusterConfig()
		if err != nil {
			fmt.Printf("this is error in cluster config %s \n", err.Error())
		}
	}
	clientset, err := kubernetes.NewForConfig(config)
	if err != nil {
		fmt.Printf("this is error %s \n", err.Error())
	}
	ctx := context.Background()
	pods, err := clientset.CoreV1().Pods("default").List(ctx, v1.ListOptions{})
	if err != nil {
		fmt.Printf("this is error %s \n", err.Error())
	}
	fmt.Print("pods from default namespace")
	for _, pod := range pods.Items {
		fmt.Print("\n", pod.Name)
	}
}
